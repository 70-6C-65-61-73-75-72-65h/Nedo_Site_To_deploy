{"version":3,"sources":["redux/geo-reducer.js","components/Geolocation/LeafletMap/GeoMap.jsx","components/Geolocation/Geoulocation.jsx","components/common/hotEditingHook.jsx","App.js","serviceWorker.js","redux/redux-store.js","index.js","components/Geolocation/Geolocation.module.scss","components/Geolocation/LeafletMap/GeoMap.module.scss"],"names":["initialState","locationStatus","latitude","longitude","mapMaxScale","isFetchingLocation","osmBaseLink","setFetchingLocation","type","setLocationStatus","geoStatuses","geoReducer","state","action","GeoMap","center","maxZoom","position","zoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","className","geoMapClasses","leaflet_container","TileLayer","url","Marker","Popup","compose","connect","geoLocation","setMapMaxScale","getMyLocation","dispatch","a","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","error","timeout","enableHighAccuracy","coords","message","startFieldValue","apiFunction","useState","fieldValue","setFieldValue","useEffect","e","parseInt","currentTarget","value","useRangeInput","onScaleChange","scale","geoClasses","find_me","onClick","disabled","getOsmText","min","max","slider","onChange","App","Geoulocation","Boolean","window","location","hostname","match","reducers","combineReducers","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.9223931b.chunk.js","sourcesContent":["const SET_MY_LOCATION = 'SET_MY_LOCATION'; // set latitude and longitude // set mapLink href textContent\r\nconst SET_LOCATION_STATUS = 'SET_LOCATION_STATUS'; // locationStatus\r\n\r\n// // set mapLink href textContent\r\nconst SET_MAP_MAX_SCALE = 'SET_MAP_LINK_SCALE'; // set mapLink scale #map query\r\nconst SET_FETCHING_LOCATION = 'SET_FETCHING_LOCATION'\r\n\r\nconst OSM_BASE_LINK = `https://www.openstreetmap.org/`;\r\n\r\nlet initialState = {\r\n    locationStatus: null,\r\n\r\n    latitude: null,\r\n    longitude: null,\r\n\r\n    mapMaxScale: 14,\r\n\r\n    isFetchingLocation: false,\r\n\r\n    osmBaseLink: OSM_BASE_LINK,\r\n    \r\n    // mapLink: {\r\n    //     href: '',\r\n    //     textContent: '',\r\n    //     scale: ''\r\n    // }\r\n\r\n}\r\n\r\nconst geoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_FETCHING_LOCATION: {\r\n            return { ...state, isFetchingLocation: action.isFetchingLocation }\r\n        }\r\n        case SET_LOCATION_STATUS: {\r\n            return { ...state, locationStatus: action.locationStatus }\r\n        }\r\n        case SET_MY_LOCATION: {\r\n            return { ...state, latitude: action.latitude, longitude: action.longitude }\r\n        }\r\n\r\n        case SET_MAP_MAX_SCALE: {\r\n            return { ...state, mapMaxScale: action.mapMaxScale }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setFetchingLocation = (isFetchingLocation) => ({ type: SET_FETCHING_LOCATION, isFetchingLocation }) //  make button disabled\r\nconst setMyLocation = (latitude, longitude) => ({ type: SET_MY_LOCATION, latitude, longitude })\r\nconst setLocationStatus = (locationStatus) => ({ type: SET_LOCATION_STATUS, locationStatus })\r\n\r\nexport const setMapMaxScale = (mapMaxScale) => ({ type: SET_MAP_MAX_SCALE, mapMaxScale })\r\n\r\n\r\nexport const geoStatuses = {\r\n    // rejected: 'Geolocation is not supported by your browser', // if error frmo promise\r\n    unsupported: 'Unable to retrieve your location', // !navigator.geolocation\r\n    pending: 'Locating…',// wait to response from api\r\n    fullfilled: 'Successfully located'\r\n} // success\r\n\r\n// const getCoordinates = () =>  {\r\n//     return new Promise(function(resolve, reject) {\r\n//       navigator.geolocation.getCurrentPosition(resolve, reject);\r\n//     });\r\n//   }\r\n\r\nexport const getMyLocation = () => async (dispatch) => {\r\n    dispatch(setFetchingLocation(true))\r\n\r\n    dispatch(setLocationStatus(geoStatuses.pending))\r\n\r\n    if(!navigator.geolocation){\r\n        dispatch(setLocationStatus(geoStatuses.unsupported))\r\n        return null\r\n    } \r\n\r\n    try {\r\n        const position = await new Promise(function (resolve, reject) {\r\n            let positionOption = { timeout: 20000, enableHighAccuracy: true };\r\n            navigator.geolocation.getCurrentPosition(\r\n                position => { \r\n                    resolve(position)\r\n                }, error => {\r\n                    // console.log(error) // or if user denied geo\r\n                    reject(error)\r\n                }, positionOption);\r\n        });\r\n\r\n        dispatch(setMyLocation(position.coords.latitude, position.coords.longitude))\r\n        dispatch(setLocationStatus(geoStatuses.fullfilled))\r\n\r\n    } catch (error) {\r\n        dispatch(setLocationStatus(error.message))\r\n    } \r\n\r\n    dispatch(setFetchingLocation(false))\r\n}\r\n\r\n\r\nexport default geoReducer;","import React, { useState } from 'react'\r\nimport geoMapClasses from './GeoMap.module.scss'\r\n\r\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\n// maxZoom can be maximum 19 (no more) ( make zoom 14 and max zoom 19)\r\n// center - position - our coordinates // [50, 10]\r\nconst GeoMap = ({center, maxZoom, position}) => { \r\n    // const \r\n    // const [url, setUrl] = useState('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\r\n    return (\r\n        <div>\r\n            <LeafletMap\r\n          center={center}\r\n          zoom={maxZoom}\r\n          maxZoom={19}\r\n          attributionControl={true}\r\n                  zoomControl={true}\r\n                  doubleClickZoom={true}\r\n                  scrollWheelZoom={true}\r\n                  dragging={true}\r\n                  animate={true}\r\n                  className={geoMapClasses.leaflet_container}\r\n                //   easeLinearity={0.35}\r\n          >\r\n          <TileLayer\r\n            url={'http://{s}.tile.osm.org/{z}/{x}/{y}.png'}\r\n            // maxZoom={maxZoom}\r\n            // attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          <Marker position={position}>\r\n            <Popup>\r\n              Мы находимся здесь!\r\n            </Popup>\r\n          </Marker>\r\n        </LeafletMap>\r\n        </div>\r\n      );\r\n}\r\n  \r\nexport default GeoMap;","import React from 'react';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport geoClasses from './Geolocation.module.scss';\r\nimport { getMyLocation, setMapMaxScale, geoStatuses } from '../../redux/geo-reducer';\r\nimport { useRangeInput } from '../common/hotEditingHook';\r\nimport GeoMap from './LeafletMap/GeoMap';\r\n\r\n// const getOsmHref = (osmBaseLink, mapLinkScale, latitude, longitude) => {\r\n//     return `${osmBaseLink}/#map=${mapLinkScale}/${latitude}/${longitude}`\r\n// }\r\n\r\nconst getOsmText = (latitude, longitude) => {\r\n    return ` Широота: ${latitude} °, Долгота: ${longitude} °`\r\n} \r\n\r\n\r\nconst GeolocationSnippet = ({locationStatus, osmBaseLink, latitude, longitude, \r\n                            mapMaxScale, isFetchingLocation,\r\n                            getMyLocation, setMapMaxScale}) => {\r\n\r\n    const [ onScaleChange, scale ] = useRangeInput(mapMaxScale, setMapMaxScale)\r\n    // we use only onScaleChange // scale // editMode( make it in  scss)\r\n    return (\r\n        <div className={geoClasses.geolocation}>\r\n            { locationStatus && <p> {locationStatus} </p> }\r\n            <button className={geoClasses.find_me} onClick={getMyLocation} disabled={isFetchingLocation} >\r\n                И где я нахожуся?\r\n            </button>\r\n            { locationStatus === geoStatuses.fullfilled && <>\r\n                {/* <p>Watch my location on site:  \r\n                <a href={getOsmHref(osmBaseLink, mapLinkScale, latitude, longitude)}> \r\n                    {getOsmText(latitude, longitude)} \r\n                </a>\r\n                </p>  */} \r\n                <p>Мои координаты: {getOsmText(latitude, longitude)} </p>\r\n                <p>Уровень масштаба: приближение в {mapMaxScale} раз </p> \r\n                {/* раз (относительно размера земли) */}\r\n                <div className=\"slidecontainer\">\r\n                    <input type=\"range\" min=\"1\" max=\"19\" value={scale} className={geoClasses.slider} onChange={onScaleChange} />\r\n                </div>\r\n\r\n                <GeoMap center={[latitude, longitude]} maxZoom={mapMaxScale} position={[latitude, longitude]} />\r\n               </>\r\n            } \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    latitude: state.geoLocation.latitude,\r\n    longitude: state.geoLocation.longitude,\r\n    mapMaxScale: state.geoLocation.mapMaxScale, \r\n    osmBaseLink: state.geoLocation.osmBaseLink,\r\n    locationStatus: state.geoLocation.locationStatus,\r\n    isFetchingLocation: state.geoLocation.isFetchingLocation,\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setMapMaxScale,\r\n        getMyLocation\r\n    })\r\n)(GeolocationSnippet);","import { useState, useEffect } from 'react';\r\nexport const useHotEditing = (startFieldValue, apiFunction, validators=[], maxLength=0) => { //  additionalData=null\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [fieldValue, setFieldValue] = useState(startFieldValue);\r\n    let [isInvalid, setisInvalid] = useState(false);\r\n\r\n    let [charCount, setCharCount] = useState(`${startFieldValue.length}/${maxLength}`)\r\n\r\n    useEffect(() => {\r\n        setFieldValue(startFieldValue);\r\n    }, [startFieldValue]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        !isInvalid && apiFunction(fieldValue)\r\n    }\r\n    const onFieldValueChange = (e) => {\r\n        console.log('onChange now')\r\n        console.log(e.currentTarget.value)\r\n       if( validators.every(valid => valid(e.currentTarget.value)===undefined)) {\r\n            setisInvalid(false)\r\n            setFieldValue(e.currentTarget.value) \r\n            chars(e.currentTarget.value.length, maxLength)\r\n       } else {\r\n        setisInvalid(true)\r\n       }\r\n    }\r\n\r\n    const chars = (currLen, maxLength) => {\r\n        setCharCount(`${currLen}/${maxLength}`)\r\n    }\r\n\r\n\r\n    return [activateEditMode, deactivateEditMode, onFieldValueChange, editMode, fieldValue, isInvalid, charCount]\r\n}\r\n\r\n\r\nexport const useRangeInput = (startFieldValue, apiFunction) => { //  additionalData=null \r\n    let [fieldValue, setFieldValue] = useState(startFieldValue); \r\n\r\n    useEffect(() => {\r\n        setFieldValue(startFieldValue);\r\n    }, [startFieldValue]);\r\n    \r\n    const onFieldValueChange = (e) => {\r\n        // console.log('onChange now')\r\n        // console.log(e.currentTarget.value)\r\n        apiFunction(parseInt(e.currentTarget.value))\r\n    }\r\n\r\n\r\n    return [ onFieldValueChange, fieldValue]\r\n}\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Geoulocation from './components/Geolocation/Geoulocation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          Geolocation\n      </header>\n      <Geoulocation />\n    </div>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { compose, applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport geoReducer from \"./geo-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    geoLocation: geoReducer,\r\n    form :formReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n\r\nwindow.__store__ = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/redux-store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"geolocation\":\"Geolocation_geolocation__2ApgH\",\"find_me\":\"Geolocation_find_me__3XIWv\",\"scaleMapLocation\":\"Geolocation_scaleMapLocation__j0MM3\",\"slider\":\"Geolocation_slider__a2z06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaflet_container\":\"GeoMap_leaflet_container__1Px7q\"};"],"sourceRoot":""}