{"version":3,"sources":["components/common/formValidators.js","redux/geo-reducer.js","components/common/FormControls.jsx","components/Geolocation/Geoulocation.jsx","App.js","serviceWorker.js","redux/redux-store.js","index.js","components/common/FormsControls.module.scss","components/Geolocation/Geolocation.module.scss"],"names":["max","initialState","locationStatus","latitude","longitude","mapLinkScale","isFetchingLocation","osmBaseLink","setFetchingLocation","type","setLocationStatus","geoStatuses","geoReducer","state","action","isIneger","value","Number","isInteger","Object","is","parseInt","NaN","undefined","maxValue19","FormControl","input","meta","touched","error","warning","children","hasError","hasWarn","className","styles","formControl","Input","props","restProps","child","SetMapLocationReduxForm","reduxForm","form","handleSubmit","pristine","reset","submitting","onSubmit","placeholder","name","component","validators","text","Field","validate","createField","formStyles","formSummaryError","disabled","onClick","SetMapLocation","setMapLinkScale","formData","getOsmHref","compose","connect","geoLocation","getMyLocation","dispatch","a","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","position","timeout","enableHighAccuracy","coords","message","geoClasses","find_me","href","getOsmText","App","Geoulocation","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.0ac93d74.chunk.js","sourcesContent":["export const requiredField = value => {\r\n    if(value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nconst maxValue = max => value => \r\n    value && value > max ? `Value must be not bigger then ${max}`: undefined;\r\n\r\nexport const isIneger = value =>  {\r\n    if(typeof value === 'undefined') return undefined\r\n    return !Number.isInteger(+value) || Object.is(parseInt(value), NaN) ? `Value must be an integer`  : undefined; \r\n}\r\n\r\nexport const maxValue19 = maxValue(19)    \r\n  ","const SET_MY_LOCATION = 'SET_MY_LOCATION'; // set latitude and longitude // set mapLink href textContent\r\nconst SET_LOCATION_STATUS = 'SET_LOCATION_STATUS'; // locationStatus\r\n\r\n// // set mapLink href textContent\r\nconst SET_MAP_LINK_SCALE = 'SET_MAP_LINK_SCALE'; // set mapLink scale #map query\r\nconst SET_FETCHING_LOCATION = 'SET_FETCHING_LOCATION'\r\n\r\nconst OSM_BASE_LINK = `https://www.openstreetmap.org/`;\r\n\r\nlet initialState = {\r\n    locationStatus: null,\r\n\r\n    latitude: null,\r\n    longitude: null,\r\n\r\n    mapLinkScale: 14,\r\n\r\n    isFetchingLocation: false,\r\n\r\n    osmBaseLink: OSM_BASE_LINK,\r\n    \r\n    // mapLink: {\r\n    //     href: '',\r\n    //     textContent: '',\r\n    //     scale: ''\r\n    // }\r\n\r\n}\r\n\r\nconst geoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_FETCHING_LOCATION: {\r\n            return { ...state, isFetchingLocation: action.isFetchingLocation }\r\n        }\r\n        case SET_LOCATION_STATUS: {\r\n            return { ...state, locationStatus: action.locationStatus }\r\n        }\r\n        case SET_MY_LOCATION: {\r\n            return { ...state, latitude: action.latitude, longitude: action.longitude }\r\n        }\r\n\r\n        case SET_MAP_LINK_SCALE: {\r\n            return { ...state, mapLinkScale: action.mapLinkScale }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setFetchingLocation = (isFetchingLocation) => ({ type: SET_FETCHING_LOCATION, isFetchingLocation }) //  make button disabled\r\nconst setMyLocation = (latitude, longitude) => ({ type: SET_MY_LOCATION, latitude, longitude })\r\nconst setLocationStatus = (locationStatus) => ({ type: SET_LOCATION_STATUS, locationStatus })\r\n\r\nexport const setMapLinkScale = (mapLinkScale) => ({ type: SET_MAP_LINK_SCALE, mapLinkScale })\r\n\r\n\r\nexport const geoStatuses = {\r\n    // rejected: 'Geolocation is not supported by your browser', // if error frmo promise\r\n    unsupported: 'Unable to retrieve your location', // !navigator.geolocation\r\n    pending: 'Locatingâ€¦',// wait to response from api\r\n    fullfilled: 'Successfully located'\r\n} // success\r\n\r\n// const getCoordinates = () =>  {\r\n//     return new Promise(function(resolve, reject) {\r\n//       navigator.geolocation.getCurrentPosition(resolve, reject);\r\n//     });\r\n//   }\r\n\r\nexport const getMyLocation = () => async (dispatch) => {\r\n    dispatch(setFetchingLocation(true))\r\n\r\n    dispatch(setLocationStatus(geoStatuses.pending))\r\n\r\n    if(!navigator.geolocation){\r\n        dispatch(setLocationStatus(geoStatuses.unsupported))\r\n        return null\r\n    } \r\n\r\n    try {\r\n        const position = await new Promise(function (resolve, reject) {\r\n            let positionOption = { timeout: 20000, enableHighAccuracy: true };\r\n            navigator.geolocation.getCurrentPosition(\r\n                position => { \r\n                    resolve(position)\r\n                }, error => {\r\n                    // console.log(error) // or if user denied geo\r\n                    reject(error)\r\n                }, positionOption);\r\n        });\r\n\r\n        dispatch(setMyLocation(position.coords.latitude, position.coords.longitude))\r\n        dispatch(setLocationStatus(geoStatuses.fullfilled))\r\n\r\n    } catch (error) {\r\n        dispatch(setLocationStatus(error.message))\r\n    } \r\n\r\n    dispatch(setFetchingLocation(false))\r\n}\r\n\r\n\r\nexport default geoReducer;","import React from 'react';\r\nimport styles from './FormsControls.module.scss'\r\nimport { Field } from 'redux-form';\r\n \r\n\r\nconst FormControl = ({ input, meta: {touched, error, warning}, children }) => { // children = <input {...input} {...restProps} /> or children = <input {...input} {...restProps} />\r\n    const hasError = touched && error;\r\n    const hasWarn = touched && warning;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error: \"\") + ' ' + (hasWarn ? styles.warning: \"\")}>\r\n            <div className=''>\r\n                {children}\r\n            </div>\r\n            <div className=''>\r\n                {\r\n                (hasError && <span>{error}</span>) ||\r\n                (hasWarn && <span>{warning}</span>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const TextArea = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return (<FormControl {...props}><textarea {...input} {...restProps} /></FormControl>)\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props; \r\n    return (<FormControl {...props}><input {...input} {...restProps}/></FormControl>)\r\n}\r\n\r\nexport const createField = (placeholder, name, component, validators, props={}, text=\"\") => { \r\n    return <div className=''><Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/>{text}</div>\r\n};\r\n","import React from 'react';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport geoClasses from './Geolocation.module.scss';\r\nimport { getMyLocation, setMapLinkScale, geoStatuses } from '../../redux/geo-reducer';\r\nimport { maxValue19, isIneger } from '../common/formValidators';\r\nimport { reduxForm } from 'redux-form';\r\nimport { createField, Input } from '../common/FormControls';\r\nimport formStyles from '../common/FormsControls.module.scss';\r\n \r\n\r\nconst SetMapLocationForm = props => {\r\n    const { handleSubmit, pristine, reset, submitting, error } = props\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Write your map scale...', 'mapScale', Input, [maxValue19, isIneger])}\r\n\r\n            {\r\n            error && \r\n            <div className={formStyles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div className=''>\r\n                <button type='submit' disabled={pristine || submitting} >Send</button>\r\n            </div>\r\n            <div className=''>\r\n                <button type='button' disabled={pristine || submitting} onClick={reset}>Clear</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\nconst SetMapLocationReduxForm = reduxForm({form: 'SetMapLocation'})(SetMapLocationForm)\r\n\r\nconst SetMapLocation = ({setMapLinkScale}) => {\r\n    const onSubmit = (formData) => { \r\n        parseInt(formData['mapScale']) && setMapLinkScale(formData['mapScale'])\r\n    }\r\n    return (\r\n        <SetMapLocationReduxForm onSubmit={onSubmit} />\r\n    )\r\n}\r\n\r\n\r\nconst getOsmHref = (osmBaseLink, mapLinkScale, latitude, longitude) => {\r\n    return `${osmBaseLink}/#map=${mapLinkScale}/${latitude}/${longitude}`\r\n}\r\n\r\nconst getOsmText = (latitude, longitude) => {\r\n    return ` Latitude: ${latitude} Â°, Longitude: ${longitude} Â°`\r\n} \r\n\r\n\r\nconst GeolocationSnippet = ({locationStatus, osmBaseLink, latitude, longitude, \r\n                            mapLinkScale, isFetchingLocation,\r\n                            getMyLocation, setMapLinkScale}) => {\r\n // mapLinkScale\r\n // setMapLinkScale\r\n\r\n    return (\r\n        <div className={geoClasses.geolocation}>\r\n            { locationStatus && <p> {locationStatus} </p> }\r\n            <button className={geoClasses.find_me} onClick={getMyLocation} disabled={isFetchingLocation} >\r\n                Show my location\r\n            </button>\r\n            { locationStatus === geoStatuses.fullfilled && <><p>Watch my location on site:  \r\n                <a href={getOsmHref(osmBaseLink, mapLinkScale, latitude, longitude)}> \r\n                    {getOsmText(latitude, longitude)} \r\n                </a>\r\n                </p> \r\n                <p>Current map scale: {mapLinkScale}</p>\r\n                <SetMapLocation setMapLinkScale={setMapLinkScale}/>\r\n               </>\r\n            } \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    latitude: state.geoLocation.latitude,\r\n    longitude: state.geoLocation.longitude,\r\n    mapLinkScale: state.geoLocation.mapLinkScale, \r\n    osmBaseLink: state.geoLocation.osmBaseLink,\r\n    locationStatus: state.geoLocation.locationStatus,\r\n    isFetchingLocation: state.geoLocation.isFetchingLocation,\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setMapLinkScale,\r\n        getMyLocation\r\n    })\r\n)(GeolocationSnippet);","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Geoulocation from './components/Geolocation/Geoulocation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          Geolocation\n      </header>\n      <Geoulocation />\n    </div>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { compose, applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport geoReducer from \"./geo-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    geoLocation: geoReducer,\r\n    form :formReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n\r\nwindow.__store__ = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/redux-store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__8utRk\",\"error\":\"FormsControls_error__1GpNx\",\"warning\":\"FormsControls_warning__Sl-Aw\",\"formSummaryError\":\"FormsControls_formSummaryError__3LS28\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"geolocation\":\"Geolocation_geolocation__2ApgH\",\"find_me\":\"Geolocation_find_me__3XIWv\",\"scaleMapLocation\":\"Geolocation_scaleMapLocation__j0MM3\"};"],"sourceRoot":""}